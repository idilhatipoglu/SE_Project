# -*- coding: utf-8 -*-
"""streamlit_audio_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wXi6HXXMN-fCpxdU5VKb1uYBW85V8m3f
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries 
import pandas as pd
import matplotlib.pyplot as plt
import librosa
import librosa.display
from tqdm import tqdm
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow as tf
import tensorflow.keras.models as models
import tensorflow.keras.layers as layers
import IPython.display as ipd
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline
# %load_ext tensorboard
from sklearn.neighbors import KNeighborsClassifier

from sklearn.neighbors import KNeighborsClassifier

import pickle

#mounting the google drive we have datasets on as well as a csv we will need later on (all on github)
from google.colab import drive
drive.mount('/content/drive')

#new paths for cleaned datasets
path_train = 'ManualTrainClean/'
path_test = 'ManualTestClean/'
path_validate = 'ManualValidationClean/'


header = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'
for i in range(1, 21):
    header += f' mfcc{i}'
header += ' label'
header = header.split()

import csv 
import os
import librosa
import numpy as np 


#We extract features from a spectogram: 
#Mel-frequency cepstral coefficients (MFCC), Spectral Centroid, Zero Crossing Rate, Chroma Frequencies, and Spectral Roll-off
file = open('dataset.csv', 'w', newline='')
with file:
    writer = csv.writer(file)
    writer.writerow(header)
insects = 'ManualTrainClean ManualValidationClean ManualTestClean'.split()
for g in insects:
    for filename in os.listdir(f'/content/drive/MyDrive/SE project/Data/Audio Data/Insect Audio_Classification/{g}'):
        songname = f'/content/drive/MyDrive/SE project/Data/Audio Data/Insect Audio_Classification/{g}/{filename}'
        y, sr = librosa.load(songname, mono=True, duration=30)
        rmse = librosa.feature.rms(y=y)[0]
        chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)
        spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)
        spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)
        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)
        zcr = librosa.feature.zero_crossing_rate(y)
        mfcc = librosa.feature.mfcc(y=y, sr=sr)
        to_append = f'{filename} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    
        for e in mfcc:
            to_append += f' {np.mean(e)}'
        to_append += f' {filename[0:14]}'
        file = open('dataset.csv', 'a', newline='')
        with file:
            writer = csv.writer(file)
            writer.writerow(to_append.split())

#Loading the created CSV data
import pandas as pd
df = pd.read_csv('dataset.csv')
df

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np 

#Data preprocessing: label encoding, feature scaling and data split into training and test set.
data = df.copy()
data.head()# Dropping unneccesary columns
data = data.drop(['filename'],axis=1)#Encoding the Labels
genre_list = data.iloc[:, -1]
encoder = LabelEncoder()
y = encoder.fit_transform(genre_list)#Scaling the Feature columns
scaler = StandardScaler()
X = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))#Dividing data into Training and Testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#Loading a manually created table of all of the insects names and their family order to be able to group them
df2 = pd.read_csv('/content/drive/MyDrive/SE project/Data/Audio Data/Insect Audio_Classification/klasyfikacja - Arkusz1.csv')

def set_label(row):
    if (row["label"] == "Chorthippusbig") or (row["label"] == "Chorthippusbru") or (row["label"] == "Grylluscampest") or (row["label"] == "Nemobiussylves") or (row["label"] == "Oecanthuspellu") or (row["label"] == "Pholidopteragr") or  (row["label"] == "Pseudochorthip") or (row["label"] == "Roeselianaroes") or (row["label"] == "Tettigoniaviri"):
        return "Orthoptera"
    else:
        return "Cicadidae"

df = df.assign(order=df.apply(set_label, axis=1))

df.drop(columns=['label'], axis = 1, inplace = True)

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split


data = df.copy()
data.head()# Dropping unneccesary columns
data = data.drop(['filename'],axis=1)#Encoding the Labels
genre_list = data.iloc[:, -1]
encoder = LabelEncoder()
y = encoder.fit_transform(genre_list)#Scaling the Feature columns
scaler = StandardScaler()
X = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))#Dividing data into training and Testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# from sklearn import svm

# clf = svm.SVC()
# clf.fit(X_train, y_train)

# predictions = clf.predict(X_test)

# score = clf.score(X_test, y_test)
# score

knn = KNeighborsClassifier(n_neighbors = 5).fit(X_train, y_train)
  
# accuracy on X_test
accuracy = knn.score(X_test, y_test)
accuracy

# filename = 'finalized_audio_classification.sav'
# pickle.dump(knn, open(filename, 'wb'))